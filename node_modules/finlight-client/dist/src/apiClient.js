"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = void 0;
const axios_1 = __importDefault(require("axios"));
class ApiClient {
    constructor(config) {
        this.config = config;
        this.client = axios_1.default.create({
            baseURL: config.baseUrl,
            timeout: config.timeout,
            headers: { 'X-API-KEY': config.apiKey },
        });
    }
    async request(method, url, params, data) {
        let attempts = 0;
        const maxRetries = this.config.retryCount ?? 3;
        while (attempts < maxRetries) {
            try {
                const response = await this.client.request({
                    method,
                    url,
                    params,
                    data,
                });
                return response.data;
            }
            catch (error) {
                attempts++;
                if (attempts === maxRetries || !this.isRetryableError(error)) {
                    throw error;
                }
                const waitTime = this.calculateBackoff(attempts);
                console.warn(`Retrying (${attempts}/${maxRetries}) after ${waitTime}ms:`, error.message);
                await this.delay(waitTime);
            }
        }
        throw new Error('Max retries reached');
    }
    isRetryableError(error) {
        return [429, 500, 502, 503, 504].includes(error.response?.status);
    }
    calculateBackoff(attempt) {
        const baseWait = 500;
        return baseWait * Math.pow(2, attempt - 1);
    }
    delay(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
}
exports.ApiClient = ApiClient;
//# sourceMappingURL=apiClient.js.map