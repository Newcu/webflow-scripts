"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketClient = void 0;
const ws_1 = __importDefault(require("ws"));
class WebSocketClient {
    constructor(config) {
        this.config = config;
    }
    connect(requestPayload, onMessage) {
        this.webSocket = new ws_1.default(this.config.wssUrl, {
            headers: {
                'x-api-key': this.config.apiKey,
            },
        });
        this.webSocket.on('open', () => {
            console.debug('Connected to web socket');
            this.sendRequest(requestPayload);
            this.createPingInterval();
        });
        this.webSocket.on('message', (data) => {
            try {
                const message = JSON.parse(data.toString());
                const action = message.action;
                if (action === 'pong') {
                    this.handlePong();
                }
                if (action === 'sendArticle') {
                    this.receiveArticle(message, onMessage);
                }
            }
            catch (error) {
                console.error('Error parsing WebSocket message:', error);
            }
        });
        this.webSocket.on('close', (code, reason) => {
            console.debug(`WebSocket connection closed. Code: ${code}, Reason: ${reason.toString()}`);
        });
        this.webSocket.on('error', (error) => {
            console.error('WebSocket error:', error);
        });
    }
    createPingInterval() {
        this.pingInterval = setInterval(() => {
            if (this.webSocket?.readyState !== ws_1.default.OPEN) {
                console.debug('WebSocket is not open. Skipping ping.');
                return;
            }
            console.debug('PING');
            this.webSocket?.send(JSON.stringify({ action: 'ping' }));
        }, 8 * 60 * 1_000);
    }
    sendRequest(payload) {
        if (this.webSocket?.readyState === ws_1.default.OPEN) {
            this.webSocket.send(JSON.stringify(payload));
        }
        else {
            console.error('WebSocket is not open. Cannot send message.');
        }
    }
    disconnect() {
        clearInterval(this.pingInterval);
        this.webSocket?.close();
    }
    receiveArticle(response, callback) {
        const article = response.data;
        article.publishDate = new Date(article.publishDate);
        article.confidence = Number(article.confidence);
        callback(article);
    }
    handlePong() {
        console.debug('PONG');
    }
}
exports.WebSocketClient = WebSocketClient;
//# sourceMappingURL=webSocketClient.js.map